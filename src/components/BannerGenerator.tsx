import React, { useState, useRef } from 'react';

const BannerGenerator: React.FC = () => {
  const [description, setDescription] = useState('');
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Check file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError('Image file is too large. Please choose an image under 10MB.');
        return;
      }
      
      // Check file type
      if (!file.type.startsWith('image/')) {
        setError('Please upload a valid image file (PNG, JPG, GIF, etc.)');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        setUploadedImage(e.target?.result as string);
        setImageFile(file);
        setError(null);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeImage = () => {
    setUploadedImage(null);
    setImageFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const generateImage = async () => {
    if (!description.trim()) {
      setError('Please enter a description of what you want to create.');
      return;
    }

    if (!uploadedImage) {
      setError('Please upload an image you want to integrate.');
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      // For now, we'll simulate the AI generation process
      // In a real implementation, you'd call an AI image generation API here
      // like DALL-E, Midjourney API, or a custom AI service
      
      await new Promise(resolve => setTimeout(resolve, 3000)); // Simulate API call
      
      // For demo purposes, we'll create a canvas-based combination
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        throw new Error('Could not create canvas context');
      }

      // Set canvas size
      canvas.width = 800;
      canvas.height = 600;

      // Load the uploaded image
      const img = new Image();
      img.onload = () => {
        // Draw the uploaded image as background
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        
        // Add a semi-transparent overlay
        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Add text overlay with the description
        ctx.fillStyle = 'white';
        ctx.font = 'bold 24px Arial';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        // Wrap text if it's too long
        const words = description.split(' ');
        const maxWidth = canvas.width - 100;
        let line = '';
        let y = canvas.height / 2 - 50;
        
        for (let n = 0; n < words.length; n++) {
          const testLine = line + words[n] + ' ';
          const metrics = ctx.measureText(testLine);
          const testWidth = metrics.width;
          
          if (testWidth > maxWidth && n > 0) {
            ctx.fillText(line, canvas.width / 2, y);
            line = words[n] + ' ';
            y += 30;
          } else {
            line = testLine;
          }
        }
        ctx.fillText(line, canvas.width / 2, y);
        
        // Add a watermark
        ctx.font = '16px Arial';
        ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
        ctx.fillText('Generated by SPREMT LABS Image Maker', canvas.width / 2, canvas.height - 30);
        
        // Convert to data URL
        const generatedDataUrl = canvas.toDataURL('image/png');
        setGeneratedImage(generatedDataUrl);
        setIsGenerating(false);
      };
      
      img.src = uploadedImage;
      
    } catch (err) {
      setError('Failed to generate image. Please try again.');
      setIsGenerating(false);
    }
  };

  const downloadImage = () => {
    if (!generatedImage) return;
    
    const link = document.createElement('a');
    link.download = `generated-image-${Date.now()}.png`;
    link.href = generatedImage;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const resetForm = () => {
    setDescription('');
    setUploadedImage(null);
    setImageFile(null);
    setGeneratedImage(null);
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-12">
      <div className="container mx-auto px-6">
        <div className="max-w-4xl mx-auto">
          
          {/* Header */}
          <div className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-light text-gray-800 mb-4">
              AI Image Maker
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Upload any image and describe what you want to create. Our AI will generate a new image combining your vision with your uploaded photo.
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            
            {/* Input Panel */}
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-6">Create Your Image</h2>
              
              {/* Description Input */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Describe what you want to create
                </label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="e.g., 'Add a sunset background', 'Make it look like a painting', 'Add flying birds', etc."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  rows={4}
                />
              </div>

              {/* Image Upload */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Upload your image
                </label>
                
                {!uploadedImage ? (
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors">
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="hidden"
                    />
                    <button
                      onClick={() => fileInputRef.current?.click()}
                      className="text-blue-600 hover:text-blue-700 font-medium"
                    >
                      Click to upload image
                    </button>
                    <p className="text-gray-500 text-sm mt-2">
                      PNG, JPG, GIF up to 10MB
                    </p>
                  </div>
                ) : (
                  <div className="relative">
                    <img
                      src={uploadedImage}
                      alt="Uploaded"
                      className="w-full h-64 object-cover rounded-lg"
                    />
                    <button
                      onClick={removeImage}
                      className="absolute top-2 right-2 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-red-600 transition-colors"
                    >
                      ×
                    </button>
                  </div>
                )}
              </div>

              {/* Error Display */}
              {error && (
                <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-red-700 text-sm">{error}</p>
                </div>
              )}

              {/* Generate Button */}
              <button
                onClick={generateImage}
                disabled={isGenerating || !description.trim() || !uploadedImage}
                className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors mb-4"
              >
                {isGenerating ? 'Generating...' : 'Generate Image'}
              </button>

              {/* Reset Button */}
              <button
                onClick={resetForm}
                className="w-full bg-gray-200 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-300 transition-colors"
              >
                Reset
              </button>
            </div>

            {/* Output Panel */}
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
              <h2 className="text-2xl font-semibold text-gray-800 mb-6">Generated Image</h2>
              
              {isGenerating ? (
                <div className="flex items-center justify-center h-64 bg-gray-50 rounded-lg">
                  <div className="text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <p className="text-gray-600">AI is working on your image...</p>
                  </div>
                </div>
              ) : generatedImage ? (
                <div>
                  <img
                    src={generatedImage}
                    alt="Generated"
                    className="w-full h-64 object-cover rounded-lg mb-4"
                  />
                  <button
                    onClick={downloadImage}
                    className="w-full bg-green-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-green-700 transition-colors"
                  >
                    Download Image
                  </button>
                </div>
              ) : (
                <div className="flex items-center justify-center h-64 bg-gray-50 rounded-lg">
                  <p className="text-gray-500 text-center">
                    Your generated image will appear here
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* How It Works */}
          <div className="mt-16 bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6 text-center">How It Works</h2>
            
            <div className="grid md:grid-cols-3 gap-8">
              <div className="text-center">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">📝</span>
                </div>
                <h3 className="text-lg font-semibold text-gray-800 mb-2">1. Describe</h3>
                <p className="text-gray-600">
                  Tell us what you want to create. Be as specific or creative as you like.
                </p>
              </div>
              
              <div className="text-center">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">📷</span>
                </div>
                <h3 className="text-lg font-semibold text-gray-800 mb-2">2. Upload</h3>
                <p className="text-gray-600">
                  Upload any image you want to use as a base or reference for your creation.
                </p>
              </div>
              
              <div className="text-center">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">🎨</span>
                </div>
                <h3 className="text-lg font-semibold text-gray-800 mb-2">3. Generate</h3>
                <p className="text-gray-600">
                  Our AI combines your description with your image to create something unique.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BannerGenerator;